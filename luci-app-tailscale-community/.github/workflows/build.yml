name: Build OpenWrt Package

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: v24.10.3
  PACKAGE_NAME: luci-app-tailscale-community
  SDK_DIR: /home/runner/work/openwrt-sdk

jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: x86_64
            path: x86/64

    steps:
      # 步骤 1: 检出代码
      - name: Checkout package repository
        uses: actions/checkout@v4

      # 步骤 2: 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential rsync unzip zstd

      # 步骤 3: 缓存 OpenWrt SDK
      # 缓存已下载和初步设置好的 SDK 目录。
      - name: Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          # 需要缓存的目录路径
          path: ${{ env.SDK_DIR }}
          # 缓存键：结合操作系统、目标架构和 OpenWrt 版本，确保环境变化时缓存失效
          key: ${{ runner.os }}-sdk-${{ matrix.target.name }}-${{ env.OPENWRT_VERSION }}

      # 步骤 4: 准备 SDK (仅在缓存未命中时运行)
      # 这个组合步骤包含了下载、解压 SDK 和更新 feeds，因为这些都是 SDK 准备过程的一部分，应该一起被缓存。
      - name: Download, extract OpenWrt SDK and update feeds
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          # 从环境变量中移除 'v' 前缀以匹配版本号
          release_version="${OPENWRT_VERSION#v}"
          sdk_url_prefix="https://downloads.openwrt.org/releases/${release_version}/targets/${{ matrix.target.path }}"
          
          # 查找 SDK 文件名
          sdk_filename=$(curl -s "$sdk_url_prefix/" | \
                        grep -o '<a href="openwrt-sdk-.*-x86_64\.tar\.\(xz\|zst\)">' | \
                        sed -e 's/.*<a href="//' -e 's/">//' | \
                        head -n 1)

          if [ -z "$sdk_filename" ]; then
            echo "::error::Could not find SDK file at ${sdk_url_prefix}/"
            echo "Available files:"
            curl -s "$sdk_url_prefix/" | grep -o '<a href="[^"]*">[^<]*</a>' | sed -e 's/<a href="\(.*\)".*>\(.*\)/\1\t\2/'
            exit 1
          fi
          
          echo "Downloading SDK: ${sdk_url_prefix}/${sdk_filename}"
          wget -q "${sdk_url_prefix}/${sdk_filename}"
          
          echo "Extracting SDK..."
          # 解压 SDK 并重命名为固定的目录名，以匹配缓存路径
          tar -xf "$sdk_filename"
          mv $(find . -maxdepth 1 -type d -name 'openwrt-sdk-*') ${{ env.SDK_DIR }}

          echo "Updating feeds..."
          cd ${{ env.SDK_DIR }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cd ..

      # 步骤 5: 准备构建配置
      - name: Prepare build environment
        working-directory: ${{ env.SDK_DIR }}
        run: |
          rm -rf package/${{ env.PACKAGE_NAME }}
          cp -r ${{ github.workspace }} ./package/
          echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" > .config
          make defconfig

      # 步骤 6a: 编译软件包
      - name: Compile the package
        working-directory: ${{ env.SDK_DIR }}
        run: |
          make package/${{ env.PACKAGE_NAME }}/compile V=s -j$(($(nproc) + 1))

      # 步骤 7: 查找并准备 .ipk 文件
      - name: Find and prepare .ipk file
        id: find_ipk
        working-directory: ${{ env.SDK_DIR }}
        run: |
          ipk_path=$(find ./bin/packages -name "${{ env.PACKAGE_NAME }}*.ipk" | head -n 1 | sed 's|^\./||')
          if [ -z "$ipk_path" ]; then
            echo "::error::IPK file not found in ./bin/packages/"
            # 显示编译输出目录树，方便调试
            echo "Directory tree of ./bin/:"
            ls -R ./bin/
            exit 1
          fi
          echo "Found IPK: $ipk_path"
          echo "path=$ipk_path" >> $GITHUB_OUTPUT

      # 步骤 8: 上传 .ipk 文件作为构建产物
      - name: Upload .ipk artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target.name }}
          path: ${{ env.SDK_DIR }}/${{ steps.find_ipk.outputs.path }}
          if-no-files-found: error
